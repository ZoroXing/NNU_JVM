                                  JavaSE 安全模型                                  
                                                              做成者:ZoroXing
                                                              做成日:2014/07/27

■1. 概述
     Java安全模型对不可靠的程序做了限制，包括如下4项：
      ▶a. 对本地磁盘的访问；
      ▶b. 进行任何网络连接，但不能连接到提供这个Java程序的源主机；
      ▶c. 创建新的进程；
      ▶d. 装载新的动态链接库。★(2.c.2)
     Java安全模型的发展主线：JDK1.0版本的基本沙箱，JDK1.1版本的代码签名和认证，
     最后是JDK1.2版本的细粒度访问控制
      ▶a. JDK1.0的基本沙箱限制过于严苛，善意的代码常常无法有效工作；
      ▶b. JDK1.1包含了对善意代码的认证支持，但是除了提供完全信任和完全不信任的
          策略以外，并没有提供其他帮助；
      ▶c. JDK1.2提供的API可以帮助建立细粒度的安全策略，这种策略建立在JDK1.1的数
          字签名和代码的认证基础上。

■2. JDK1.0基本沙箱
     JAVA沙箱的基本组成部分：
      ▶a. 类装装载器结构；
          类装载器体系结构在三个方面对Java沙箱起作用：
           ▪ 1) 防止恶意代码去干涉善意的代码
                通过为由不同的类装载器装入的类提供不同的命名空间来实现；在Java
                虚拟机中，在同一个命名空间内的类可以直接进行交互，而不同的命名
                空间中类无法进行联系。
           ▪ 2) 守护了被信任的类库边界
                • 类装载器体系通过剔除装作被信任的不可靠类(例如：自定义java.lang.String)，
                  来保护可信任类型的边界的(★双亲委派机制)。
                • 如果一个移动代码不是提供一个被信任的类(例如：自定义java.lang.Virus)，
                  而是在一个被信任的包中插入一个全新的类型：
                ★类装载器机制可以防止这个代码得到访问java.lang包中被信任类的访
                  问权限，因为JVM只把彼此访问的特殊权限授予由同一个类装载器装载
                  到同一个包中的类型。
           ▪ 3) 它将代码归入某类(保护域),该类确定了代码可以进行哪些操作

      ▶b. class文件检查器
          class文件检验器要进行四趟独立的扫描来完成它的操作：
           ▪ 1) 第1趟：class文件的结构检查
                在类装载时进行，class文件检验器检查这个class文件的内部结构，以
                保证它可以被安全地编译；
           ▪ 2) 第2趟：类型数据的语义检查
           ▪ 3) 第3趟：字节码检查
                这两趟在连接过程中进行，class文件检验器确认类型数据遵循java编程
                语义，包括检查所有字节码的完整性；
           ▪ 4) 符号引用的验证
                进行动态链接过程中解析符号引用时进行的；这次扫描中，class文件检
                验器确认被引用的类、字段以及方法确实存在。

      ▶c. 内置于Java虚拟机（及语言）的安全特性
          Java虚拟机在执行字节码时还进行其他一些内置的安全机制的操作，包括5项：
           ▪ 1) 类型安全的引用转换
           ▪ 2) 结构化的内存访问(无指针算法)
                ▪ 禁止对内存进行非结构化访问，是由字节码指令集本身的决定的；它
                  是防止对内存恶意破坏的一种固有措施；
                ▪ 突破非结构化内存访问的措施：绕过字节码，即调用本地方法。当调
                  用本地方法是，Java安全沙箱完全不起作用；
           ▪ 3) 自动垃圾收集(不必显示地释放被分配的内存)
           ▪ 4) 数组边界检查
           ▪ 5) 空引用检查
          
      ▶d. 安全管理器及Java API
          ▪ 1) 安全管理器是一个单独的对象，在运行JVM中，它在访问控制(访问外部资
               源)中起到中枢作用；
          ▪ 2) 它定义了沙箱的外部边界；
          ▪ 3) 在版本1.2前，java.lang.SecurityManager是一个抽象类。要在1.0或1.1
               中建立定制的安全策略，必须实现它的抽象check方法；
          ▪ 4) JDK1.2中，java.lang.SecurityManager是一个具体类，提供了一个默认
               的安全管理器实现，

■3. JDK1.1代码签名和认证

■4. JDK1.2细粒度访问控制
      ▶a. 策略
          安全策略是一个从描述运行代码的属性集合到这段代码所拥有的权限映射，
          ▪ 描运行代码的属性被总称为代码来源(java.security.CodeCourse)；
             ▪ 它包含了一个java.net.URL对象,它表示代码库路径(code location)；
             ▪  一个代表证书对象的数组（java.security.cert.Certificate）。
          ▪ 权限(java.security.Permission)包含三个属性：类型，名字和可选操作；
          ▪ Policy对象中，每一个CodeCource和一个或多个Permission关联，调用Policy对象
            的getPermission方法，传入一个CodeSource，从而得到和那个CodeSource对应的
            Permission对象集合PermissionCollection。
      ▶b. 保护ProtectionDomain对象封装了一个CodeSource对象的引用，以及一个到java.security.Permissions对象
          (抽象类java.security.PermissionCollection的一个具体类，代表权限集合)的引用。
      ▶c. 访问控制器
          • 类java.security.AccessController提供了一个默认的安全策略执行机制，
            使用栈检查（自顶向下检查）来决定潜在不安全的操作是否被允许；
          • 为了使可信的代码执行不可靠操作，AccessController提供了四个名为doPrivileged的静态方法
          • 在由AccessController执行的栈检查中，一个doPrivileged方法调用的栈帧
            标示了检查过程的提前终止点，如果和调用doPrivileged的方法相关联的保护
            域拥有执行被请求操作的权限，AccessController将立即返回。这样这个操
            作就被允许，即使在栈下层的代码可能没有执行这个操作的权限。

以上。

