                                Java线程安全
                                                              做成者:ZoroXing
                                                              做成日:2014/07/28

■1. 线程安全的定义
      ▶a. 通俗的说法
          如果一个对象可以安全地被多个线程同时使用，那他就是线程安全的。
      ▶b. 规范定义(Brian Goetz)
          当多个线程访问一个对象时；
           • 如果不用考虑这些线程在运行时环境下的调度和交替执行；
           • 不需要进行额外的同步；
           • 不需要调用方法进行任何其他的协调操作；
          这时调用这个对象的行为都可以获得正确的结果，那这个对象是线程安全的。

■2. 线程安全的分类
     线程安全不是一个非真即假的二元命题，按照线程安全的“安全程度”由强至弱来排
     序，将Java操作共享数据分为5类：
      • 不可变（Immutable）；
      • 绝对线程安全，完全满足“规范定义”；
      • 相对线程安全；
      • 线程兼容；
      • 线程对立。

■3. Java语言中的线程安全
      ▶a. 不可变（Immutable）
           • 不可变的对象一定是线程安全的；
           • 不可变实现方法：
             如果共享数据是一个基本类型，那么只需在定义时使用final关键字修饰；
             如果是一个对象，那就需保证对象的行为不会对其状态产生任何影响(java.lang.String的substring等方法)。
           • 保证对象行为不影响自身状态的途径：将成员变量声明为final。
           • Java API不可变类型：java.lang.String，枚举类型，java.lang.Number的
             部分子类(Long,Double)
      ▶b. 绝对线程安全
          该定义过于严格，在Java API中标注自己是线程安全的类，大多数都不是绝对
          的线程安全。java.util.Vector是一个线程安全的容器，但是下面的例子却是
          存在安全问题的；
          --------------------------------------------------------------------
          Vector vector = new Vector();
          Thread remove = new Thread(new Runnable(){
                  public void run(){
                        for(int i=0;i<vector.size();i++)
                            vector.remove(i);
                  }
          });

          Thread print = new Thread(new Runnable(){
                  public void run(){
                        for(int i=0;i<vector.size();i++)
                            System.out.println(vector.get(i));
                  }
          });

          remove.start();
          print.start();
          -------------------------------------------------------------------- 
          可能会出现java.lang.ArrayIndexOutofBoundsException异常
          ★ 修正后的代码如下：
          --------------------------------------------------------------------
          Vector vector = new Vector();
          Thread remove = new Thread(new Runnable(){
                  public void run(){
                        synchronized (vector){<--------------------添加对象同步
                         for(int i=0;i<vector.size();i++)
                             vector.remove(i);
                        }
                  }
          });

          Thread print = new Thread(new Runnable(){
                  public void run(){
                        synchronized (vector){<--------------------添加对象同步
                         for(int i=0;i<vector.size();i++)
                             System.out.println(vector.get(i));
                        }
                  }
          });

          remove.start();
          print.start();
          --------------------------------------------------------------------
      ▶c. 相对线程安全
          它需要保证对这个对象单独的操作是线程安全的，但是对于一些特定顺序的连
          续操作，就可能需要采用额外的同步手段保证正确性(上例)
          ★ 大部分线程安全类属于这种类型，例如：Vector，HashTable,Collections
      ▶d. 线程兼容
          对象本身并不是线程安全的，但是可以通过在调用端正确使用同步手段来保证
          对象在并发环境中可以安全调用。Java API大部分属于线程兼容的
      ▶e. 线程对立
          无论调用端是否采用了同步措施，都无法在多线程环境下并发使用代码
          • Thread类的suspend（中断）和resume（恢复）方法（静态）；
          • System类的setIn和setOut方法

■4. 线程安全的实现方法
      ▶a. 互斥同步（阻塞同步)(悲观并发策略)
           • 同步是指多个线程并发访问共享数据时，保证共享数据在同一个时刻只被同
             一个线程使用
           • 互斥是实现同步的一种手段
           • 临界区(Critical Section),互斥量(Mutex)和信号量(Semaphore)是互斥实现方式。
           • 互斥是因，同步是果；互斥是方法，同步时目的。
           • 同步块对同一线程是可重入的，不会出现锁死自己的现象；
           • 同步块在已进入的线程执行完之前，会阻塞后面的线程进入，如果阻塞或唤
             醒一个线程，都需OS帮忙，需要从用户态转换到核心态（性能问题）。
      ▶b. 非阻塞同步(乐观并发策略)
           • 基于冲突检测的乐观并发策略。即先进行操作，如果没其他线程争用共享数
             据，操作成功；如果有，则采取补救措施（不断的重试，直到成功）
           • 操作中并不挂起线程；
           • CAS(Compare and swap)指令(3操作数)：内存位置(V),旧预期值(A),新值(B)
             当且仅当V符合旧预期值A时，处理器用新值B更新V值，否则不更新，但无论
             是否更新V值，都返回V的旧值（非旧预期值A）。
           • CAS的逻辑漏洞（ABA问题）
      ▶c. 无同步方法
           • 可重入代码
           • 线程本地存储（TLS）


-以上-